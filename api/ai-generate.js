/**
 * Vercel Serverless Function - proxy dla OpenRouter API
 * Bezpieczne wywołanie AI bez eksponowania klucza API w przeglądarce
 */

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const apiKey = process.env.OPENROUTER_API_KEY;

  if (!apiKey) {
    return res.status(500).json({ 
      error: 'OpenRouter API key not configured on server' 
    });
  }

  try {
    const { systemPrompt, userPrompt, contentType } = req.body;

    if (!systemPrompt || !userPrompt || !contentType) {
      return res.status(400).json({ 
        error: 'Missing required fields: systemPrompt, userPrompt, contentType' 
      });
    }

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': process.env.VERCEL_URL 
          ? `https://${process.env.VERCEL_URL}` 
          : 'http://localhost:3000',
        'X-Title': 'Quiz & Workout Generator'
      },
      body: JSON.stringify({
        // Available OpenRouter models (2025):
        // - anthropic/claude-sonnet-4.5: Najlepsza jakość, najnowszy model (zalecane)
        // - anthropic/claude-3.5-sonnet: Stabilny, świetny stosunek ceny do jakości
        // - anthropic/claude-3-opus: Najwyższa jakość dla złożonych zadań (droższy)
        model: 'anthropic/claude-sonnet-4.5',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      let errorMessage = 'OpenRouter API error';
      try {
        const errorData = await response.json();
        console.error('OpenRouter API error:', errorData);
        errorMessage = errorData.error?.message || errorMessage;
      } catch (e) {
        // Jeśli nie można sparsować jako JSON
        const text = await response.text();
        console.error('OpenRouter API error (non-JSON):', text.substring(0, 500));
        errorMessage = `API error ${response.status}`;
      }
      return res.status(response.status).json({ 
        error: errorMessage
      });
    }

    const data = await response.json();
    
    // Zwróć tylko wygenerowaną treść
    const generatedText = data.choices?.[0]?.message?.content;
    
    if (!generatedText) {
      console.error('No content in AI response:', data);
      return res.status(500).json({ 
        error: 'No content generated by AI. Check API key and model availability.' 
      });
    }

    res.status(200).json({ 
      content: generatedText,
      usage: data.usage // Opcjonalnie: informacja o zużyciu tokenów
    });

  } catch (error) {
    console.error('AI generation error:', error);
    res.status(500).json({ 
      error: error.message || 'Internal server error' 
    });
  }
}

